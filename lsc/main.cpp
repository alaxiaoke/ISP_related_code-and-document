#include <cmath> 
#include "LSC_Core.h"

float d50_lsc0[] = { 3.9170,3.4839,3.1287,2.8426,2.6183,2.4496,2.2776,2.1732,2.1400,2.1652,2.2632,2.4345,2.5975,2.8156,3.0946,3.4420,3.8662,
3.3440,2.9469,2.6229,2.3855,2.2073,2.0292,1.9213,1.8598,1.8375,1.8563,1.9176,2.0233,2.1926,2.3620,2.6153,2.9375,3.3325,
2.9090,2.5414,2.1771,2.0114,1.8457,1.7275,1.6341,1.5702,1.5493,1.5707,1.6328,1.7303,1.8549,2.0247,2.1945,2.5597,2.9314,
2.5916,2.3184,1.9733,1.7775,1.6229,1.4943,1.3915,1.3254,1.3036,1.3268,1.3961,1.5033,1.6401,1.8056,2.0108,2.3388,2.6443,
2.3672,2.0466,1.8043,1.6147,1.4485,1.3117,1.2093,1.1469,1.1279,1.1521,1.2212,1.3326,1.4811,1.6587,1.8671,2.1146,2.4165,
2.1685,1.9255,1.7041,1.5077,1.3365,1.2001,1.1003,1.0416,1.0260,1.0512,1.1188,1.2297,1.3818,1.5722,1.7869,2.0284,2.2683,
2.1122,1.8879,1.6687,1.4715,1.3013,1.1679,1.0708,1.0143,1.0000,1.0274,1.0956,1.2065,1.3591,1.5518,1.7726,2.0147,2.2459,
2.1697,1.9273,1.7060,1.5126,1.3462,1.2146,1.1191,1.0630,1.0494,1.0784,1.1508,1.2646,1.4199,1.6143,1.8345,2.0776,2.3229,
2.3741,2.0528,1.8125,1.6269,1.4683,1.3380,1.2420,1.1864,1.1746,1.2063,1.2837,1.4032,1.5604,1.7509,1.9635,2.2203,2.5392,
2.5930,2.3383,1.9904,1.7988,1.6532,1.5328,1.4406,1.3864,1.3759,1.4096,1.4910,1.6122,1.7612,1.9393,2.1556,2.5065,2.8387,
2.9109,2.5587,2.2066,2.0505,1.8945,1.7869,1.7031,1.6553,1.6498,1.6839,1.7621,1.8757,2.0156,2.2021,2.3885,2.8001,3.2056,
3.3466,2.9703,2.6648,2.4663,2.2908,2.1153,2.0217,1.9743,1.9711,2.0069,2.0868,2.2142,2.4158,2.6174,2.8999,3.2605,3.6994,
3.9204,3.5144,3.1835,2.9197,2.7163,2.5677,2.4273,2.3327,2.3164,2.3660,2.4903,2.6939,2.8899,3.1455,3.4671,3.8629,4.3419, };


float d50_lsc1[] = { 3.3365,2.9946,2.7131,2.4855,2.3064,2.1713,2.0344,1.9487,1.9225,1.9444,2.0235,2.1623,2.2939,2.4693,2.6928,2.9698,3.3065,
2.8919,2.5759,2.3168,2.1256,1.9775,1.8294,1.7441,1.6974,1.6825,1.6974,1.7423,1.8282,1.9715,2.1149,2.3164,2.5754,2.8913,
2.5523,2.2575,1.9657,1.8278,1.6899,1.5931,1.5192,1.4734,1.4579,1.4746,1.5219,1.5975,1.7000,1.8424,1.9848,2.2783,2.5775,
2.3035,2.0938,1.7994,1.6411,1.5156,1.4097,1.3276,1.2749,1.2588,1.2780,1.3326,1.4195,1.5323,1.6695,1.8376,2.1118,2.3521,
2.1371,1.8627,1.6639,1.5129,1.3760,1.2612,1.1773,1.1257,1.1100,1.1316,1.1880,1.2810,1.4037,1.5530,1.7189,1.9226,2.1772,
1.9727,1.7668,1.5873,1.4285,1.2862,1.1701,1.0860,1.0365,1.0222,1.0447,1.1029,1.1964,1.3251,1.4845,1.6599,1.8540,2.0553,
1.9302,1.7412,1.5635,1.4022,1.2587,1.1438,1.0608,1.0124,1.0000,1.0231,1.0829,1.1775,1.3082,1.4717,1.6535,1.8486,2.0384,
1.9769,1.7730,1.5939,1.4370,1.2969,1.1846,1.1028,1.0557,1.0449,1.0693,1.1302,1.2276,1.3600,1.5227,1.7023,1.8993,2.1045,
2.1545,1.8756,1.6781,1.5295,1.3970,1.2888,1.2085,1.1624,1.1542,1.1816,1.2426,1.3433,1.4760,1.6323,1.8046,2.0146,2.2844,
2.3210,2.1217,1.8243,1.6687,1.5495,1.4507,1.3764,1.3344,1.3267,1.3555,1.4186,1.5167,1.6413,1.7854,1.9625,2.2569,2.5206,
2.5768,2.2927,2.0090,1.8764,1.7438,1.6550,1.5921,1.5578,1.5544,1.5835,1.6424,1.7285,1.8442,2.0008,2.1575,2.4881,2.8139,
2.9245,2.6229,2.3769,2.2191,2.0707,1.9222,1.8486,1.8145,1.8134,1.8425,1.9028,2.0029,2.1732,2.3435,2.5661,2.8553,3.2054,
3.3785,3.0555,2.7911,2.5795,2.4157,2.2958,2.1909,2.1145,2.1004,2.1382,2.2445,2.3972,2.5549,2.7599,3.0168,3.3316,3.7109, };


float d50_lsc2[] = { 2.8655,2.5977,2.3759,2.1958,2.0534,1.9456,1.8450,1.7682,1.7434,1.7604,1.8323,1.9363,2.0407,2.1794,2.3554,2.5726,2.8355,
2.5110,2.2620,2.0567,1.9332,1.7997,1.6662,1.5911,1.5494,1.5353,1.5467,1.5876,1.6617,1.7898,1.9179,2.0527,2.2571,2.5051,
2.2386,2.0051,1.7810,1.6644,1.5477,1.4659,1.4039,1.3640,1.3508,1.3642,1.4034,1.4677,1.5544,1.6741,1.7938,2.0180,2.2542,
2.0380,1.8917,1.6361,1.5039,1.4012,1.3148,1.2480,1.2054,1.1922,1.2076,1.2502,1.3209,1.4139,1.5261,1.6648,1.9011,2.0730,
1.9219,1.6823,1.5169,1.3940,1.2840,1.1945,1.1284,1.0896,1.0779,1.0942,1.1369,1.2106,1.3086,1.4264,1.5624,1.7281,1.9477,
1.7717,1.5965,1.4498,1.3227,1.2107,1.1221,1.0585,1.0243,1.0144,1.0309,1.0737,1.1444,1.2447,1.3702,1.5088,1.6649,1.8341,
1.7307,1.5715,1.4280,1.3006,1.1884,1.1026,1.0409,1.0075,1.0000,1.0169,1.0598,1.1303,1.2309,1.3577,1.5006,1.6575,1.8149,
1.7715,1.6011,1.4533,1.3288,1.2188,1.1331,1.0732,1.0396,1.0338,1.0512,1.0950,1.1690,1.2718,1.3997,1.5419,1.7007,1.8727,
1.9302,1.6898,1.5263,1.4066,1.3008,1.2152,1.1546,1.1202,1.1152,1.1358,1.1823,1.2610,1.3664,1.4917,1.6282,1.8014,2.0295,
2.0481,1.9075,1.6519,1.5241,1.4271,1.3469,1.2865,1.2546,1.2488,1.2703,1.3199,1.3996,1.5018,1.6189,1.7639,2.0163,2.2070,
2.2528,2.0286,1.8103,1.6991,1.5879,1.5141,1.4612,1.4320,1.4283,1.4517,1.4995,1.5719,1.6703,1.8024,1.9344,2.1849,2.4413,
2.5297,2.2931,2.0991,2.0008,1.8692,1.7376,1.6728,1.6416,1.6393,1.6621,1.7138,1.7987,1.9490,2.0992,2.2508,2.4785,2.7526,
2.8896,2.6377,2.4307,2.2643,2.1351,2.0402,1.9701,1.8968,1.8825,1.9175,2.0068,2.1220,2.2470,2.4088,2.6108,2.8570,3.1524, };



uint16_t* read_uint16_raw_file(const char* filename, size_t* num_elements) {
    FILE* file = fopen(filename, "rb");
    if (file == NULL) {
        perror("无法打开文件");
        return NULL;
    }

    // 获取文件大小
    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    if (file_size % sizeof(uint16_t) != 0) {
        fprintf(stderr, "文件大小不是 uint16_t 类型的倍数\n");
        fclose(file);
        return NULL;
    }

    *num_elements = file_size / sizeof(uint16_t);

    // 分配内存
    uint16_t* data = (uint16_t*)malloc(*num_elements * sizeof(uint16_t));
    if (data == NULL) {
        perror("内存分配失败");
        fclose(file);
        return NULL;
    }

    // 读取文件内容
    size_t elements_read = fread(data, sizeof(uint16_t), *num_elements, file);
    if (elements_read != *num_elements) {
        fprintf(stderr, "读取文件失败\n");
        free(data);
        fclose(file);
        return NULL;
    }

    fclose(file);
    return data;
}

// 将 uint16_t 类型的数组写入 .raw 文件
int write_uint16_raw_file(const char* filename, const uint16_t* data, size_t num_elements) {
    FILE* file = fopen(filename, "wb");
    if (file == NULL) {
        perror("无法打开文件");
        return -1;
    }

    // 写入文件内容
    size_t elements_written = fwrite(data, sizeof(uint16_t), num_elements, file);
    if (elements_written != num_elements) {
        fprintf(stderr, "写入文件失败\n");
        fclose(file);
        return -1;
    }

    fclose(file);
    return 0;
}

void main()
{
    LSC_TABLE* lsc_table = (LSC_TABLE*)malloc(sizeof(LSC_TABLE));
    LSC_UPSCALE_TABLE* upscale_table = (LSC_UPSCALE_TABLE*)malloc(sizeof(LSC_UPSCALE_TABLE));
    //memset(lsc_table, 0, sizeof(LSC_TABLE));
    //memset(upscale_table, 0, sizeof(LSC_UPSCALE_TABLE));

    int bayer_pat = GXR_Raw_RGGB;	//GXR_Raw_GRBG;/BGGR/RGGB

    for (int i = 0; i < LSC_TABLE_W * LSC_TABLE_H; i++) {
        lsc_table->shading_table_r[i] = d50_lsc0[i] * pow(2, 12);
        lsc_table->shading_table_gr[i] = d50_lsc1[i] * pow(2, 12);
        lsc_table->shading_table_gb[i] = d50_lsc1[i] * pow(2, 12);
        lsc_table->shading_table_b[i] = d50_lsc2[i] * pow(2, 12);
    }

    for (int i = 0; i < RAW_SIZE / 4; i++) {
        upscale_table->upscale_table_r[i] = 1 ;
        upscale_table->upscale_table_gr[i] = 1;
        upscale_table->upscale_table_gb[i] = 1;
        upscale_table->upscale_table_b[i] = 1;
    }

    const char* filename = "D:/work/LSC/litePipe_LSC/1.raw";
    size_t num_elements;

    uint16_t* data = read_uint16_raw_file(filename, &num_elements);
    if (data == NULL) {
        return;
    }
    tableUpScale(lsc_table->shading_table_r, upscale_table->upscale_table_r);
    tableUpScale(lsc_table->shading_table_gr, upscale_table->upscale_table_gr);
    tableUpScale(lsc_table->shading_table_gb, upscale_table->upscale_table_gb);
    tableUpScale(lsc_table->shading_table_b, upscale_table->upscale_table_b);


    //for (size_t i = 5 * LSC_TABLE_W; i < 6 * LSC_TABLE_W; ++i) {
    //    printf("%d ", lsc_table->shading_table_r[i]);
    //}
    //printf("\n");

    //for (size_t i = 470 * RAW_W / 2; i < 471 * RAW_W/2; ++i) {
    //    printf("%u ", upscale_table->upscale_table_r[i]);
    //}

    apply_lsc(bayer_pat, upscale_table,  data);

    const char* filename_out = "outputApplyedRGGB.raw";

    if (write_uint16_raw_file(filename_out, data, num_elements) == 0) {
        printf("数据已成功写入文件 %s\n", filename_out);
    }
    else {
        printf("写入文件失败\n");
    }


    // 释放内存
    free(data);

    return;

}